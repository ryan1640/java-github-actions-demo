## SETUP
## Run before activating pipeline
# nightvision app create javaspringvulny-api
# nightvision target create javaspringvulny-api https://127.0.0.1:9000 --type api
# nightvision auth playwright create javaspringvulny-api https://127.0.0.1:9000

## Optional steps can be performed locally or in the pipeline
# nightvision swagger extract . -t javaspringvulny-api --lang java
# nightvision scan javaspringvulny-api --auth javaspringvulny-api

name: NightVision Security Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  NIGHTVISION_TOKEN: ${{ secrets.NIGHTVISION_TOKEN }}
  NIGHTVISION_TARGET: javaspringvulny-api
  NIGHTVISION_AUTH: javaspringvulny-api
  
jobs:
  security-scan:
    permissions:
      security-events: write
      contents: read
    runs-on: ubuntu-latest
    
    steps:
      - name: (1) Clone Code
        uses: actions/checkout@v4
      
      - name: (2) Install NightVision
        run: |
          wget -c https://downloads.nightvision.net/binaries/latest/nightvision_latest_linux_amd64.tar.gz -O - | tar -xz
          sudo mv nightvision /usr/local/bin/
          python -m pip install semgrep --user

      - name: (3) Extract API documentation from code
        run: |
          nightvision swagger extract . -t ${NIGHTVISION_TARGET} --lang java || true
          if [ ! -e openapi-spec.yml ]; then
            echo "⚠️  Using backup OpenAPI spec"
            cp backup-openapi-spec.yml openapi-spec.yml
          fi

      - name: (4) Start the app
        run: |
          docker compose up -d
          
          # Wait for app to be healthy (max 60 seconds)
          echo "Waiting for app to start..."
          for i in {1..12}; do
            if curl -k -s -f https://127.0.0.1:9000/ > /dev/null 2>&1; then
              echo "✅ App is ready!"
              break
            fi
            echo "Attempt $i/12 - waiting 5 seconds..."
            sleep 5
          done

      - name: (5) Scan the API
        run: |
          nightvision scan ${NIGHTVISION_TARGET} --auth ${NIGHTVISION_AUTH} > scan-results.txt
          cat scan-results.txt
          nightvision export sarif -s "$(head -n 1 scan-results.txt)" --swagger-file openapi-spec.yml

      - name: (5.5) Remap info-level findings to warning for GitHub visibility
        if: success()
        run: |
          python3 << 'EOF'
          import json
          
          # Read the SARIF file
          with open('results.sarif', 'r') as f:
              sarif = json.load(f)
          
          # Count findings by level
          note_count = 0
          for run in sarif.get('runs', []):
              for result in run.get('results', []):
                  if result.get('level') == 'note':
                      result['level'] = 'warning'
                      note_count += 1
                      print(f"Remapped: {result.get('message', {}).get('text', 'Unknown')}")
          
          # Write back the modified SARIF
          with open('results.sarif', 'w') as f:
              json.dump(sarif, f, indent=2)
          
          print(f"\n✅ Successfully remapped {note_count} info-level findings to warning")
          EOF

      - name: (6) Upload scan results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightvision-scan-results
          path: |
            scan-results.txt
            results.sarif
            openapi-spec.yml
          retention-days: 30

      - name: (7) Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
          category: nightvision

      - name: (8) Cleanup
        if: always()
        run: docker compose down -v
